/*
 * Copyright (C) 2017 Ignite Realtime Foundation. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.ifsoft.llama.openfire;

import java.util.*;
import java.util.concurrent.*;
import java.io.*;
import java.net.*;
import java.nio.charset.*;

import javax.annotation.Nullable;

import org.dom4j.Namespace;
import org.jivesoftware.openfire.*;
import org.jivesoftware.openfire.nio.OfflinePacketDeliverer;
import org.jivesoftware.openfire.session.LocalClientSession;
import org.jivesoftware.openfire.session.LocalSession;
import org.jivesoftware.openfire.session.ClientSession;
import org.jivesoftware.openfire.spi.ConnectionConfiguration;
import org.jivesoftware.openfire.spi.ConnectionManagerImpl;
import org.jivesoftware.openfire.spi.ConnectionType;
import org.jivesoftware.openfire.net.VirtualConnection;
import org.jivesoftware.openfire.auth.UnauthorizedException;
import org.jivesoftware.openfire.auth.AuthToken;
import org.jivesoftware.openfire.auth.AuthFactory;

import org.jivesoftware.util.JiveGlobals;

import org.xmpp.packet.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.dom4j.*;
import net.sf.json.*;


public class LLaMAConnection extends VirtualConnection
{
    private static final Logger Log = LoggerFactory.getLogger(LLaMAConnection.class);

    private SessionPacketRouter router;	
    private PacketDeliverer backupDeliverer;
    private ConnectionConfiguration configuration;	
    private ConnectionType connectionType;	
	private String username;
	private AuthToken authToken = null;
    private LocalClientSession session;	
    private ExecutorService exec = Executors.newFixedThreadPool(LLaMA.numThreads);	
	
	private final String domain = XMPPServer.getInstance().getServerInfo().getXMPPDomain();
	private final String hostname = XMPPServer.getInstance().getServerInfo().getHostname();

    public String remoteAddr;	
    public String remoteUrl;	

    public LLaMAConnection(String username, String remoteUrl) {
		this.username = username;
		this.remoteUrl = remoteUrl;
		this.remoteAddr = "llama-" + System.currentTimeMillis();
		
		try {
			
			for (ClientSession sess : SessionManager.getInstance().getSessions(username)) 
			{				
				if (((LocalClientSession) sess).getConnection() instanceof LLaMAConnection) {
					sess.close();
				}
			}	
			
			session = SessionManager.getInstance().createClientSession( this, (Locale) null );
			AuthToken authToken = AuthToken.generateUserToken( username );
			session.setAuthToken(authToken, remoteAddr);	
				
			final String alias = JiveGlobals.getProperty("llama.alias", "LLaMA");			
			final String fullName = JiveGlobals.getProperty("llama.full.name", "Digital Assistant");
			final String avatar = JiveGlobals.getProperty("llama.avatar", "");
			
			IQ iq = new IQ();
			iq.setFrom(username + "@" + domain + "/" + remoteAddr);
			iq.setTo(username + "@" + domain);			
			iq.setType(IQ.Type.set);				
				
			Element child = iq.setChildElement("vCard", "vcard-temp");
			child.addElement("FN").setText(fullName);
			child.addElement("NICKNAME").setText(alias);

			Element photo = child.addElement("PHOTO");
			photo.addElement("TYPE").setText("image/png");
			photo.addElement("BINVAL").setText(avatar);

			XMPPServer.getInstance().getIQRouter().route(iq);	
			Log.debug("vcard-temp set for " + username);			

			router = new SessionPacketRouter( session );
			route("<presence />");	
			Log.debug("presence set for " + username);				
			
			Log.info("xmpp session created for " + username);			
		} catch (Exception e) {
			Log.error("XMPPConnection  error", e);
		}		
    }
	
	public void handlePrediction(final String prompt, final JID requestor, final Message.Type chatType, final IQ reply) {
		exec.execute(new Runnable() {
			public void run() {
				long threadId = Thread.currentThread().getId()% LLaMA.numThreads;
	
				final String alias = JiveGlobals.getProperty("llama.alias", "LLaMA");
				/*
					"system_prompt": {
						"prompt": "Transcript of a never ending dialog, where the User interacts with an Assistant.\nThe Assistant is helpful, kind, honest, good at writing, and never fails to answer the User's requests immediately and with precision.\nUser: Recommend a nice restaurant in the area.\nAssistant: I recommend the restaurant \"The Golden Duck\". It is a 5 star restaurant with a great view of the city. The food is delicious and the service is excellent. The prices are reasonable and the portions are generous. The restaurant is located at 123 Main Street, New York, NY 10001. The phone number is (212) 555-1234. The hours are Monday through Friday from 11:00 am to 10:00 pm. The restaurant is closed on Saturdays and Sundays.\nUser: Who is Richard Feynman?\nAssistant: Richard Feynman was an American physicist who is best known for his work in quantum mechanics and particle physics. He was awarded the Nobel Prize in Physics in 1965 for his contributions to the development of quantum electrodynamics. He was a popular lecturer and author, and he wrote several books, including \"Surely You're Joking, Mr. Feynman!\" and \"What Do You Care What Other People Think?\".\nUser:",
						"anti_prompt": "User:",
						"assistant_name": "Assistant:"
					}
				*/	
				
				try {
					JSONObject testData = new JSONObject();						
					double temperature = Double.parseDouble(JiveGlobals.getProperty("llama.temperature", "0.5"));
					double top_p = Double.parseDouble(JiveGlobals.getProperty("llama.top.p.sampling", "0.9"));
					
					JSONObject systemPrompt = new JSONObject();
					systemPrompt.put("prompt", JiveGlobals.getProperty("llama.system.prompt", LLaMA.getSystemPrompt()));
					systemPrompt.put("anti_prompt", "User:");				
					systemPrompt.put("assistant_name", alias);					
					
					testData.put("system_prompt", systemPrompt);
					testData.put("prompt", JiveGlobals.getProperty("llama.prefix.prompt", "[INST]") + prompt + JiveGlobals.getProperty("llama.postfix.prompt", "[/INST]"));				
					testData.put("n_predict", JiveGlobals.getIntProperty("llama.predictions", 256));
					testData.put("stream", true);
					testData.put("cache_prompt", JiveGlobals.getBooleanProperty("llama.cache.prompt", true));				
					testData.put("slot_id", threadId);				
					testData.put("temperature", temperature);
					testData.put("top_k", JiveGlobals.getIntProperty("llama.top.k.sampling", 40));
					testData.put("top_p", top_p);
					
								
					if (reply != null) {
						final String response = getJson("/completion", testData, null, null);					
						reply.setChildElement("response", "urn:xmpp:gen-ai:0").setText(response);	
						XMPPServer.getInstance().getRoutingTable().routePacket(reply.getTo(), reply);					
					} 
					else {
						getJson("/completion", testData, requestor, chatType);	
					}					
				
				} catch (Exception e) {
					Log.error("Unable to run infer prompt", e);
					
					if (reply != null) {
						reply.setError(new PacketError(PacketError.Condition.internal_server_error, PacketError.Type.modify, e.toString()));
					}					
				}				
			}
		});			
	}
	
	public void route(String xml) {
		try {
			router.route(DocumentHelper.parseText(xml).getRootElement());	
		} catch (Exception e) {
			Log.error("xmpp routing failed", e);
		}			
	}
	
	public JID getJid() {
		return session.getAddress();
	}

    @Override	
    public void closeVirtualConnection(@Nullable StreamError streamError) {
		exec.shutdown();
	}	
	
    @Override
    public Optional<String> getTLSProtocolName() {
        return this.session != null ? Optional.of(this.session.getTLSProtocolName()) : Optional.of("unknown");
    }	
	
    @Override
    public Optional<String> getCipherSuiteName() {
        return this.session != null ? Optional.of(this.session.getCipherSuiteName()) : Optional.of("unknown");
    }	

    @Override
    public byte[] getAddress() {
		return remoteAddr.getBytes();
    }

    @Override
    public String getHostAddress() {
		return remoteAddr;
    }

    @Override
    public String getHostName()  {
        return username;
    }

    @Override
    public void systemShutdown() {
		exec.shutdown();
    }

    @Override
    public void deliver(Packet packet) throws UnauthorizedException {	
		final String llamaUser = JiveGlobals.getProperty("llama.username", "llama");
		final String alias = JiveGlobals.getProperty("llama.alias", "LLaMA");		
		
        if (packet instanceof Presence) {		
			Presence presence = (Presence) packet;	
			Log.debug("Incoming Presence " + packet.getFrom() + " " + presence.getType());				
			
			if (presence.getType() == Presence.Type.subscribe) {
				Presence presence1 = new Presence();
				presence1.setTo(packet.getFrom());	
				presence1.setFrom(username + "@" + domain + "/" + remoteAddr);
				presence1.setType(Presence.Type.subscribed);
				XMPPServer.getInstance().getPresenceRouter().route(presence1);	

				Presence presence2 = new Presence();
				presence2.setTo(packet.getFrom());	
				presence2.setFrom(username + "@" + domain + "/" + remoteAddr);
				presence2.setType(Presence.Type.subscribe);
				XMPPServer.getInstance().getPresenceRouter().route(presence2);					
			}
		}
		else

		// auto accept MUC invitations
		
        if (packet instanceof Message) 
		{		
			Message message = (Message) packet;
			String muc = null;			
			/*
				<message from="florence@desktop-545pc5b/converse.js-22447515" id="2446786b-7063-4e7a-84ad-c5d91bd492dd" to="dele@desktop-545pc5b">
					<x xmlns="jabber:x:conference" jid="lobby@conference.desktop-545pc5b" reason="Please join me at CCC"></x>
				</message>
			*/
			
			Element childElement = message.getChildElement("x", "http://jabber.org/protocol/muc#user");

			if (childElement != null) {
				Element inviteElement = childElement.element("invite");

				if (inviteElement != null) {
					muc = packet.getFrom().toString();
				}
			}
			else {
				childElement = message.getChildElement("x", "jabber:x:conference");

				if (childElement != null) {
					muc = childElement.attribute("jid").getStringValue();
				}				
			}
			
			if (muc != null) {
				Log.debug("Auto-accept MUC invitation " + muc);	

				Presence presence = new Presence();
				presence.setTo(muc + "/" + alias);	
				presence.setFrom(username + "@" + domain + "/" + remoteAddr);	
				presence.addChildElement("x", "http://jabber.org/protocol/muc");				
				XMPPServer.getInstance().getPresenceRouter().route(presence);					
			}
			else {						
				Log.debug("Incoming Message " + packet.getFrom() + "\n" + message.getBody());
				String from = packet.getFrom().getNode();
				String nick = packet.getFrom().getResource();				
				String msg = message.getBody();
				
				if (!isNull(msg) && !isNull(from) && nick != null && !nick.equals(alias)) {
					JID requestor = packet.getFrom();
					
					if (message.getType() == Message.Type.groupchat) {
						
						if (msg.toLowerCase().startsWith(llamaUser.toLowerCase())) {
							requestor = new JID(packet.getFrom().toBareJID());
							handlePrediction(msg, requestor, message.getType(), null);							
						}
						
					} else {
						handlePrediction(msg, requestor, message.getType(), null);
					}
				}					
			}
		}
		else 
			
		if (packet instanceof IQ)  {
			IQ iq = (IQ) packet;
			Log.debug("Incoming IQ " + packet.getFrom() + " " + iq.getType());	

			if (iq.getType() != IQ.Type.result) {
				IQ reply = IQ.createResultIQ(iq);
				final Element element = iq.getChildElement();
						
				if (element != null && element.getNamespaceURI().equals("urn:xmpp:gen-ai:0")) {
					handlePrediction(element.getText(), null, null, reply);
					return;
				}				

				XMPPServer.getInstance().getRoutingTable().routePacket(packet.getFrom(), reply);	
			}				
		}
    }

    @Override
    public void deliverRawText(String text) {
		Log.debug("deliverRawText\n" + text);	
    }

    @Override
    public PacketDeliverer getPacketDeliverer() {
        if (backupDeliverer == null) {
            backupDeliverer = new OfflinePacketDeliverer();
        }
        return backupDeliverer;
    }

    @Override
    public ConnectionConfiguration getConfiguration() {
        if (configuration == null) {
            final ConnectionManagerImpl connectionManager = ((ConnectionManagerImpl) XMPPServer.getInstance().getConnectionManager());
            configuration = connectionManager.getListener( connectionType, true ).generateConnectionConfiguration();
        }
        return configuration;
    }

    @Override
    public boolean isCompressed() {
        return false;
    }

	
    //-------------------------------------------------------
    //
    //  Utility methods
    //
    //-------------------------------------------------------	

	private String getJson(String urlToRead, JSONObject data, JID requestor, Message.Type chatType)  {
		URL url;
		HttpURLConnection conn;
		BufferedReader rd;
		String line;
		String accumulator = "";
		StringBuilder result = new StringBuilder();

		String llamaHost = JiveGlobals.getProperty("llama.host", hostname);			
		String username = JiveGlobals.getProperty("llama.username", "llama");
		String password = JiveGlobals.getProperty("llama.password", "llama");		
		String auth = username + ":" + password;
		String authHeaderValue = "Basic " + Base64.getEncoder().encodeToString(auth.getBytes(StandardCharsets.UTF_8));
		String uri = remoteUrl + urlToRead;
		
		Log.info("getJson from LLaMA " + requestor + " " + uri + "\n" + data);
		
		try {
			url = new URL(uri);
			conn = (HttpURLConnection) url.openConnection();
			conn.setRequestProperty("Authorization", authHeaderValue);			

			conn.setDoOutput(true);
			conn.setDoInput(true);
			conn.setUseCaches(false);
			conn.setRequestMethod("POST");  
			conn.setRequestProperty("Content-Type", "application/json;charset=UTF-8");
			conn.setRequestProperty("Connection", "Keep-Alive");
			conn.setRequestProperty("Charset", "UTF-8");
			conn.setRequestProperty("Accept", "text/event-stream");
			
			conn.getOutputStream().write(data.toString().getBytes(StandardCharsets.UTF_8));

			rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));

			if (requestor != null) replyState("active", requestor, chatType);
			long seq = 0;
			
			while ((line = rd.readLine()) != null) {
				Log.debug("getJson - stream\n" + line);				
				
				if (line.startsWith("data:")) {
					JSONObject lineJson = new JSONObject("{" + line + "}").getJSONObject("data");
					
					if (!lineJson.getBoolean("stop")) {	// we got a text stream
						String content = lineJson.getString("content");
						result.append(content);
							
						if (content.equals("\n")) {
							String msg = result.toString();
							Log.info("getJson - chat\n" + msg);	
							result = new StringBuilder();	
							
							if (requestor != null && !isNull(msg)) {
								replyChat(msg, requestor, chatType);
								accumulator = accumulator + msg;
							}
							
						} else {
							
							if (requestor != null) {
								replyState("composing", requestor, chatType);
								replyRtt(content, requestor, chatType, seq);
								seq++;	
							}
						}
					} else {	// end of text stream
						String msg = result.toString();
						Log.info("getJson - chat\n" + msg);
						
						if (requestor != null) {
							replyChat(msg, requestor, chatType);	
							accumulator = accumulator + msg;							
						}
					}		
				}
			}
			rd.close();	
			if (requestor != null) replyState("inactive", requestor, chatType);				

		} catch (Exception e) {
			Log.error("getJson", e);
		}
		return accumulator;
	}

	private void replyState(String state, JID requestor, Message.Type chatType) {
		Log.debug("replyState from LLaMA " + requestor + " " + state);	

		Message newMessage = new Message();
		newMessage.setFrom(username + "@" + domain + "/" + remoteAddr);
		newMessage.setTo(requestor);		
		newMessage.setType(chatType);
        newMessage.addExtension(new PacketExtension(state, "http://jabber.org/protocol/chatstates"));		
		
		XMPPServer.getInstance().getRoutingTable().routePacket(requestor, newMessage);				
	}
	
	private void replyRtt(String msg, JID requestor, Message.Type chatType, long seq) {
		Log.debug("replyRtt from LLaMA " + requestor + " " + msg);	
		
		Message newMessage = new Message();
		newMessage.setFrom(username + "@" + domain + "/" + remoteAddr);
		newMessage.setTo(requestor);		
		newMessage.setType(chatType);

		Element rtt = DocumentHelper.createElement(QName.get("rtt", "urn:xmpp:rtt:0"));
		rtt.addAttribute("seq", String.valueOf(seq));
		if (seq == 0) rtt.addAttribute("event", "new");
		
		Element t = rtt.addElement("t");
		t.setText(msg);
        newMessage.addExtension(new PacketExtension(rtt));		
		
		XMPPServer.getInstance().getRoutingTable().routePacket(requestor, newMessage);	
	}	
	
	private void replyChat(String msg, JID requestor, Message.Type chatType) {
		Log.debug("replyChat from LLaMA " + requestor + "\n" + msg);	

		Message newMessage = new Message();
		newMessage.setFrom(username + "@" + domain + "/" + remoteAddr);
		newMessage.setTo(requestor);		
		newMessage.setType(chatType);
		newMessage.setBody(msg);
        newMessage.addExtension(new PacketExtension("active", "http://jabber.org/protocol/chatstates"));		
		
		XMPPServer.getInstance().getRoutingTable().routePacket(requestor, newMessage);				
	}
	
    private boolean isNull(String value)   {
        return (value == null || "undefined".equals(value)  || "null".equals(value) || "".equals(value.trim()) || "unknown".equals(value) || "none".equals(value));
    }	
}